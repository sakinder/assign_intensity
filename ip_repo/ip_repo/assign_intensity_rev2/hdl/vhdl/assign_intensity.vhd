-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity assign_intensity is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    alphabuf_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    alphabuf_ce0 : OUT STD_LOGIC;
    alphabuf_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    alphabuf_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    alphabuf_ce1 : OUT STD_LOGIC;
    alphabuf_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    intensity : IN STD_LOGIC_VECTOR (15 downto 0);
    node_output_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    node_output_ce0 : OUT STD_LOGIC;
    node_output_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_output_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    node_output_ce1 : OUT STD_LOGIC;
    node_output_we1 : OUT STD_LOGIC;
    node_output_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    node_count_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    node_count_ce0 : OUT STD_LOGIC;
    node_count_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    node_count_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    node_count_ce1 : OUT STD_LOGIC;
    node_count_we1 : OUT STD_LOGIC;
    node_count_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of assign_intensity is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "assign_intensity,hls_ip_2016_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=6.666670,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.790000,HLS_SYN_LAT=115,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=61,HLS_SYN_FF=2148,HLS_SYN_LUT=2767}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_pp0_stg0_fsm_40 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_st56_fsm_41 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_pp1_stg0_fsm_42 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_st72_fsm_43 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_pp2_stg0_fsm_44 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_st88_fsm_45 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_pp3_stg0_fsm_46 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_st104_fsm_47 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_true : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv64_C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001100";
    constant ap_const_lv64_D : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001101";
    constant ap_const_lv64_E : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001110";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv32_3F000000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_49800000 : STD_LOGIC_VECTOR (31 downto 0) := "01001001100000000000000000000000";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv34_0 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv48_FFFFFFFFFFFF : STD_LOGIC_VECTOR (47 downto 0) := "111111111111111111111111111111111111111111111111";
    constant ap_const_lv20_0 : STD_LOGIC_VECTOR (19 downto 0) := "00000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv61_1 : STD_LOGIC_VECTOR (60 downto 0) := "0000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_63 : BOOLEAN;
    signal j4_reg_381 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_reg_392 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_s_reg_403 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_reg_414 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_443_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_455 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_116 : BOOLEAN;
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_123 : BOOLEAN;
    signal ap_sig_cseq_ST_st6_fsm_5 : STD_LOGIC;
    signal ap_sig_131 : BOOLEAN;
    signal ap_sig_cseq_ST_st8_fsm_7 : STD_LOGIC;
    signal ap_sig_139 : BOOLEAN;
    signal reg_459 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_pp0_stg0_fsm_40 : STD_LOGIC;
    signal ap_sig_148 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it14 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp1_stg0_fsm_42 : STD_LOGIC;
    signal ap_sig_186 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it14 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp2_stg0_fsm_44 : STD_LOGIC;
    signal ap_sig_224 : BOOLEAN;
    signal ap_reg_ppiten_pp2_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp2_it14 : STD_LOGIC := '0';
    signal ap_sig_cseq_ST_pp3_stg0_fsm_46 : STD_LOGIC;
    signal ap_sig_263 : BOOLEAN;
    signal ap_reg_ppiten_pp3_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it3 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it4 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it5 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it6 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it7 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it8 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it9 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it10 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it11 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it12 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it13 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp3_it14 : STD_LOGIC := '0';
    signal reg_464 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_468 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_472_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_478 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_312 : BOOLEAN;
    signal ap_sig_cseq_ST_st9_fsm_8 : STD_LOGIC;
    signal ap_sig_319 : BOOLEAN;
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_348 : BOOLEAN;
    signal val_assign_1_reg_992 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st7_fsm_6 : STD_LOGIC;
    signal ap_sig_364 : BOOLEAN;
    signal val_assign_2_reg_1017 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_489_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_reg_1032 : STD_LOGIC_VECTOR (32 downto 0);
    signal cumsum_V_fu_515_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal cumsum_V_reg_1037 : STD_LOGIC_VECTOR (33 downto 0);
    signal ap_sig_cseq_ST_st10_fsm_9 : STD_LOGIC;
    signal ap_sig_382 : BOOLEAN;
    signal tmp_i_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_reg_1043 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st11_fsm_10 : STD_LOGIC;
    signal ap_sig_391 : BOOLEAN;
    signal ap_sig_cseq_ST_st12_fsm_11 : STD_LOGIC;
    signal ap_sig_400 : BOOLEAN;
    signal grp_fu_435_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_i_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st17_fsm_16 : STD_LOGIC;
    signal ap_sig_412 : BOOLEAN;
    signal grp_fu_438_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_8_reg_1058 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st28_fsm_27 : STD_LOGIC;
    signal ap_sig_422 : BOOLEAN;
    signal grp_fu_430_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_i_reg_1063 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st32_fsm_31 : STD_LOGIC;
    signal ap_sig_432 : BOOLEAN;
    signal loc_V_reg_1068 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_cseq_ST_st39_fsm_38 : STD_LOGIC;
    signal ap_sig_442 : BOOLEAN;
    signal loc_V_1_fu_544_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal loc_V_1_reg_1074 : STD_LOGIC_VECTOR (22 downto 0);
    signal rec_V_fu_647_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal rec_V_reg_1079 : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_sig_cseq_ST_st40_fsm_39 : STD_LOGIC;
    signal ap_sig_454 : BOOLEAN;
    signal r_V_4_fu_654_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal r_V_4_reg_1087 : STD_LOGIC_VECTOR (35 downto 0);
    signal node_output_addr_reg_1097 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter10 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter11 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter12 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter13 : STD_LOGIC_VECTOR (3 downto 0);
    signal node_count_addr_reg_1103 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_fu_669_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_1109 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_675_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1114 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_685_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal alpha_norm_V_reg_1123 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_19_fu_690_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1128 : STD_LOGIC_VECTOR (31 downto 0);
    signal rhs_V_cast_fu_703_p1 : STD_LOGIC_VECTOR (51 downto 0);
    signal rhs_V_cast_reg_1138 : STD_LOGIC_VECTOR (51 downto 0);
    signal phitmp_reg_1146 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_output_addr_1_reg_1156 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter10 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter11 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter12 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter13 : STD_LOGIC_VECTOR (3 downto 0);
    signal node_count_addr_1_reg_1162 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_1_fu_743_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_1_reg_1168 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_1_fu_749_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_1_reg_1173 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_759_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal alpha_norm_V_1_reg_1182 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_20_fu_764_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_reg_1187 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_1_reg_1197 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_output_addr_2_reg_1207 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter10 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter11 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter12 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter13 : STD_LOGIC_VECTOR (3 downto 0);
    signal node_count_addr_2_reg_1213 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_2_fu_813_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_2_reg_1219 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_2_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_2_reg_1224 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_829_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal alpha_norm_V_2_reg_1233 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_21_fu_834_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1238 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_2_reg_1248 : STD_LOGIC_VECTOR (31 downto 0);
    signal node_output_addr_3_reg_1258 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter8 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter9 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter10 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter11 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter12 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter13 : STD_LOGIC_VECTOR (3 downto 0);
    signal node_count_addr_3_reg_1264 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter1 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter5 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter6 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter7 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_3_fu_887_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_3_reg_1270 : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_3_fu_893_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_3_reg_1275 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_903_p2 : STD_LOGIC_VECTOR (47 downto 0);
    signal alpha_norm_V_3_reg_1284 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_22_fu_908_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_reg_1289 : STD_LOGIC_VECTOR (31 downto 0);
    signal phitmp_3_reg_1299 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st56_fsm_41 : STD_LOGIC;
    signal ap_sig_741 : BOOLEAN;
    signal ap_sig_cseq_ST_st72_fsm_43 : STD_LOGIC;
    signal ap_sig_751 : BOOLEAN;
    signal ap_sig_cseq_ST_st88_fsm_45 : STD_LOGIC;
    signal ap_sig_761 : BOOLEAN;
    signal j4_phi_fu_385_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_3_phi_fu_396_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_s_phi_fu_407_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_2_phi_fu_418_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_662_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_17_cast_fu_736_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_802_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_cast_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_1_fu_768_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_2_fu_838_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_3_fu_912_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_9_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_1_fu_792_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_2_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_3_fu_936_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_sig_cseq_ST_st33_fsm_32 : STD_LOGIC;
    signal ap_sig_839 : BOOLEAN;
    signal ap_sig_cseq_ST_st29_fsm_28 : STD_LOGIC;
    signal ap_sig_849 : BOOLEAN;
    signal grp_fu_435_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sig_cseq_ST_st18_fsm_17 : STD_LOGIC;
    signal ap_sig_858 : BOOLEAN;
    signal grp_fu_449_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_10_cast_fu_486_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal cumsum_V_cast_fu_482_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_13_cast_fu_498_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_7_cast_fu_495_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp9_fu_505_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp10_cast_fu_502_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp11_cast_fu_511_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_530_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_548_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_i_i_i_i_cast_fu_559_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_fu_562_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_4_i_i_i_fu_576_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_568_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_i_i_i_cast_fu_581_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_fu_585_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sh_assign_1_cast_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sh_assign_1_cast_cast_fu_597_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_2_i_i_i_fu_555_p1 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_6_i_i_i_fu_601_p1 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_7_i_i_i_fu_605_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal tmp_17_fu_617_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_i_i_i_fu_611_p2 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_6_fu_625_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_8_fu_629_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_14_fu_639_p3 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_706_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_706_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_706_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_15_fu_728_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_759_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_777_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_777_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal j_22_cast_fu_798_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_829_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_847_p0 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_847_p1 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_847_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal tmp_18_fu_868_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_19_cast5_fu_876_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_903_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_921_p0 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_921_p1 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_921_p2 : STD_LOGIC_VECTOR (51 downto 0);
    signal ap_sig_cseq_ST_st104_fsm_47 : STD_LOGIC;
    signal ap_sig_1171 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_685_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_706_p00 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_706_p10 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_759_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_777_p10 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_829_p10 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_847_p10 : STD_LOGIC_VECTOR (51 downto 0);
    signal grp_fu_903_p00 : STD_LOGIC_VECTOR (47 downto 0);
    signal grp_fu_921_p00 : STD_LOGIC_VECTOR (51 downto 0);

    component assign_intensity_fadd_32ns_32ns_32_7_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component assign_intensity_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component assign_intensity_uitofp_64ns_32_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component assign_intensity_frecip_32ns_32ns_32_11_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component assign_intensity_mul_48s_32ns_48_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component assign_intensity_mul_36ns_48ns_52_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (35 downto 0);
        din1 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;


    component assign_intensity_mul_32ns_48s_48_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (47 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (47 downto 0) );
    end component;


    component assign_intensity_mul_48ns_36ns_52_6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (47 downto 0);
        din1 : IN STD_LOGIC_VECTOR (35 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (51 downto 0) );
    end component;



begin
    assign_intensity_fadd_32ns_32ns_32_7_full_dsp_U0 : component assign_intensity_fadd_32ns_32ns_32_7_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 7,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_2_i_reg_1063,
        din1 => ap_const_lv32_3F000000,
        ce => ap_const_logic_1,
        dout => grp_fu_425_p2);

    assign_intensity_fmul_32ns_32ns_32_4_max_dsp_U1 : component assign_intensity_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_i_8_reg_1058,
        din1 => ap_const_lv32_49800000,
        ce => ap_const_logic_1,
        dout => grp_fu_430_p2);

    assign_intensity_uitofp_64ns_32_6_U2 : component assign_intensity_uitofp_64ns_32_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_435_p0,
        ce => ap_const_logic_1,
        dout => grp_fu_435_p1);

    assign_intensity_frecip_32ns_32ns_32_11_full_dsp_U3 : component assign_intensity_frecip_32ns_32ns_32_11_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 11,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => tmp_1_i_reg_1053,
        ce => ap_const_logic_1,
        dout => grp_fu_438_p2);

    assign_intensity_mul_48s_32ns_48_6_U4 : component assign_intensity_mul_48s_32ns_48_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 48,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rec_V_reg_1079,
        din1 => grp_fu_685_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_685_p2);

    assign_intensity_mul_36ns_48ns_52_6_U5 : component assign_intensity_mul_36ns_48ns_52_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 36,
        din1_WIDTH => 48,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_706_p0,
        din1 => grp_fu_706_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_706_p2);

    assign_intensity_mul_48s_32ns_48_6_U6 : component assign_intensity_mul_48s_32ns_48_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 48,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rec_V_reg_1079,
        din1 => grp_fu_759_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_759_p2);

    assign_intensity_mul_36ns_48ns_52_6_U7 : component assign_intensity_mul_36ns_48ns_52_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 36,
        din1_WIDTH => 48,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_777_p0,
        din1 => grp_fu_777_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_777_p2);

    assign_intensity_mul_48s_32ns_48_6_U8 : component assign_intensity_mul_48s_32ns_48_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 48,
        din1_WIDTH => 32,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => rec_V_reg_1079,
        din1 => grp_fu_829_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_829_p2);

    assign_intensity_mul_36ns_48ns_52_6_U9 : component assign_intensity_mul_36ns_48ns_52_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 36,
        din1_WIDTH => 48,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_847_p0,
        din1 => grp_fu_847_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_847_p2);

    assign_intensity_mul_32ns_48s_48_6_U10 : component assign_intensity_mul_32ns_48s_48_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 32,
        din1_WIDTH => 48,
        dout_WIDTH => 48)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_903_p0,
        din1 => rec_V_reg_1079,
        ce => ap_const_logic_1,
        dout => grp_fu_903_p2);

    assign_intensity_mul_48ns_36ns_52_6_U11 : component assign_intensity_mul_48ns_36ns_52_6
    generic map (
        ID => 1,
        NUM_STAGE => 6,
        din0_WIDTH => 48,
        din1_WIDTH => 36,
        dout_WIDTH => 52)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_921_p0,
        din1 => grp_fu_921_p1,
        ce => ap_const_logic_1,
        dout => grp_fu_921_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40) and not((ap_const_lv1_0 = exitcond_fu_675_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_reg_ppiten_pp0_it0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it10 <= ap_reg_ppiten_pp0_it9;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it11 <= ap_reg_ppiten_pp0_it10;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it12 <= ap_reg_ppiten_pp0_it11;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it13 <= ap_reg_ppiten_pp0_it12;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it14 <= ap_reg_ppiten_pp0_it13;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it4 <= ap_reg_ppiten_pp0_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it5 <= ap_reg_ppiten_pp0_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it6 <= ap_reg_ppiten_pp0_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it7 <= ap_reg_ppiten_pp0_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it8 <= ap_reg_ppiten_pp0_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp0_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp0_it9 <= ap_reg_ppiten_pp0_it8;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42) and not((ap_const_lv1_0 = exitcond_1_fu_749_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_41)) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42)) then 
                    ap_reg_ppiten_pp1_it1 <= ap_reg_ppiten_pp1_it0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_41)) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it10 <= ap_reg_ppiten_pp1_it9;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it11 <= ap_reg_ppiten_pp1_it10;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it12 <= ap_reg_ppiten_pp1_it11;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it13 <= ap_reg_ppiten_pp1_it12;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it14 <= ap_reg_ppiten_pp1_it13;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it3 <= ap_reg_ppiten_pp1_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it4 <= ap_reg_ppiten_pp1_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it5 <= ap_reg_ppiten_pp1_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it6 <= ap_reg_ppiten_pp1_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it7 <= ap_reg_ppiten_pp1_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it8 <= ap_reg_ppiten_pp1_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp1_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp1_it9 <= ap_reg_ppiten_pp1_it8;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44) and not((ap_const_lv1_0 = exitcond_2_fu_819_p2)))) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_43)) then 
                    ap_reg_ppiten_pp2_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44)) then 
                    ap_reg_ppiten_pp2_it1 <= ap_reg_ppiten_pp2_it0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_43)) then 
                    ap_reg_ppiten_pp2_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it10 <= ap_reg_ppiten_pp2_it9;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it11 <= ap_reg_ppiten_pp2_it10;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it12 <= ap_reg_ppiten_pp2_it11;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it13 <= ap_reg_ppiten_pp2_it12;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it14 <= ap_reg_ppiten_pp2_it13;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it2 <= ap_reg_ppiten_pp2_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it3 <= ap_reg_ppiten_pp2_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it4 <= ap_reg_ppiten_pp2_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it5 <= ap_reg_ppiten_pp2_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it6 <= ap_reg_ppiten_pp2_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it7 <= ap_reg_ppiten_pp2_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it8 <= ap_reg_ppiten_pp2_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp2_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp2_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp2_it9 <= ap_reg_ppiten_pp2_it8;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46) and not((ap_const_lv1_0 = exitcond_3_fu_893_p2)))) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st88_fsm_45)) then 
                    ap_reg_ppiten_pp3_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46)) then 
                    ap_reg_ppiten_pp3_it1 <= ap_reg_ppiten_pp3_it0;
                elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st88_fsm_45)) then 
                    ap_reg_ppiten_pp3_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it10 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it10 <= ap_reg_ppiten_pp3_it9;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it11 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it11 <= ap_reg_ppiten_pp3_it10;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it12 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it12 <= ap_reg_ppiten_pp3_it11;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it13 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it13 <= ap_reg_ppiten_pp3_it12;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it14 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it14 <= ap_reg_ppiten_pp3_it13;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it2 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it2 <= ap_reg_ppiten_pp3_it1;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it3 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it3 <= ap_reg_ppiten_pp3_it2;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it4 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it4 <= ap_reg_ppiten_pp3_it3;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it5 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it5 <= ap_reg_ppiten_pp3_it4;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it6 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it6 <= ap_reg_ppiten_pp3_it5;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it7 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it7 <= ap_reg_ppiten_pp3_it6;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it8 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it8 <= ap_reg_ppiten_pp3_it7;
            end if;
        end if;
    end process;


    ap_reg_ppiten_pp3_it9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp3_it9 <= ap_const_logic_0;
            else
                ap_reg_ppiten_pp3_it9 <= ap_reg_ppiten_pp3_it8;
            end if;
        end if;
    end process;


    j4_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_1114))) then 
                j4_reg_381 <= j_1_reg_1109;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then 
                j4_reg_381 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_2_reg_414_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_3_reg_1275))) then 
                j_2_reg_414 <= j_1_3_reg_1270;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st88_fsm_45)) then 
                j_2_reg_414 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_3_reg_392_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_1_reg_1173))) then 
                j_3_reg_392 <= j_1_1_reg_1168;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st56_fsm_41)) then 
                j_3_reg_392 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j_s_reg_403_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_2_reg_1224))) then 
                j_s_reg_403 <= j_1_2_reg_1219;
            elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st72_fsm_43)) then 
                j_s_reg_403 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1)))) then 
                reg_459 <= alphabuf_q1;
            elsif ((((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1)))) then 
                reg_459 <= alphabuf_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_true = ap_true)) then
                alpha_norm_V_1_reg_1182 <= grp_fu_759_p2;
                alpha_norm_V_2_reg_1233 <= grp_fu_829_p2;
                alpha_norm_V_3_reg_1284 <= grp_fu_903_p2;
                alpha_norm_V_reg_1123 <= grp_fu_685_p2;
                    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter2(1 downto 0) <= ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter1(1 downto 0);
                    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter3(1 downto 0) <= ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter2(1 downto 0);
                    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter4(1 downto 0) <= ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter3(1 downto 0);
                    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter5(1 downto 0) <= ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter4(1 downto 0);
                    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter6(1 downto 0) <= ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter5(1 downto 0);
                    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter7(1 downto 0) <= ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter6(1 downto 0);
                    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter2(1 downto 0) <= ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter1(1 downto 0);
                    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter3(1 downto 0) <= ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter2(1 downto 0);
                    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter4(1 downto 0) <= ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter3(1 downto 0);
                    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter5(1 downto 0) <= ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter4(1 downto 0);
                    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter6(1 downto 0) <= ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter5(1 downto 0);
                    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter7(1 downto 0) <= ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter6(1 downto 0);
                    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter2(1 downto 0) <= ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter1(1 downto 0);
                    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter3(1 downto 0) <= ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter2(1 downto 0);
                    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter4(1 downto 0) <= ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter3(1 downto 0);
                    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter5(1 downto 0) <= ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter4(1 downto 0);
                    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter6(1 downto 0) <= ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter5(1 downto 0);
                    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter7(1 downto 0) <= ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter6(1 downto 0);
                    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter2(1 downto 0) <= ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter1(1 downto 0);
                    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter3(1 downto 0) <= ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter2(1 downto 0);
                    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter4(1 downto 0) <= ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter3(1 downto 0);
                    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter5(1 downto 0) <= ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter4(1 downto 0);
                    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter6(1 downto 0) <= ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter5(1 downto 0);
                    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter7(1 downto 0) <= ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter6(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter10(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter9(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter11(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter10(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter12(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter11(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter13(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter12(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter2(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter1(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter3(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter2(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter4(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter3(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter5(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter4(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter6(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter5(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter7(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter6(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter8(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter7(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter9(1 downto 0) <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter8(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter10(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter9(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter11(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter10(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter12(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter11(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter13(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter12(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter2(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter1(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter3(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter2(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter4(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter3(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter5(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter4(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter6(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter5(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter7(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter6(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter8(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter7(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter9(1 downto 0) <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter8(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter10(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter9(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter11(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter10(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter12(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter11(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter13(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter12(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter2(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter1(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter3(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter2(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter4(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter3(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter5(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter4(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter6(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter5(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter7(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter6(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter8(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter7(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter9(1 downto 0) <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter8(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter10(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter9(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter11(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter10(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter12(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter11(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter13(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter12(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter2(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter1(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter3(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter2(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter4(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter3(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter5(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter4(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter6(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter5(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter7(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter6(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter8(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter7(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter9(1 downto 0) <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter8(1 downto 0);
                phitmp_1_reg_1197 <= grp_fu_777_p2(51 downto 20);
                phitmp_2_reg_1248 <= grp_fu_847_p2(51 downto 20);
                phitmp_3_reg_1299 <= grp_fu_921_p2(51 downto 20);
                phitmp_reg_1146 <= grp_fu_706_p2(51 downto 20);
                tmp_19_reg_1128 <= tmp_19_fu_690_p1;
                tmp_20_reg_1187 <= tmp_20_fu_764_p1;
                tmp_21_reg_1238 <= tmp_21_fu_834_p1;
                tmp_22_reg_1289 <= tmp_22_fu_908_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42)) then
                    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter1(1 downto 0) <= node_count_addr_1_reg_1162(1 downto 0);
                    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter1(1 downto 0) <= node_output_addr_1_reg_1156(1 downto 0);
                exitcond_1_reg_1173 <= exitcond_1_fu_749_p2;
                    node_count_addr_1_reg_1162(1 downto 0) <= tmp_17_cast_fu_736_p1(4 - 1 downto 0)(1 downto 0);
                    node_output_addr_1_reg_1156(1 downto 0) <= tmp_17_cast_fu_736_p1(4 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44)) then
                    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter1(1 downto 0) <= node_count_addr_2_reg_1213(1 downto 0);
                    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter1(1 downto 0) <= node_output_addr_2_reg_1207(1 downto 0);
                exitcond_2_reg_1224 <= exitcond_2_fu_819_p2;
                    node_count_addr_2_reg_1213(1 downto 0) <= tmp_16_fu_802_p3(4 - 1 downto 0)(1 downto 0);
                    node_output_addr_2_reg_1207(1 downto 0) <= tmp_16_fu_802_p3(4 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46)) then
                    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter1(1 downto 0) <= node_count_addr_3_reg_1264(1 downto 0);
                    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter1(1 downto 0) <= node_output_addr_3_reg_1258(1 downto 0);
                exitcond_3_reg_1275 <= exitcond_3_fu_893_p2;
                    node_count_addr_3_reg_1264(1 downto 0) <= tmp_19_cast_fu_880_p1(4 - 1 downto 0)(1 downto 0);
                    node_output_addr_3_reg_1258(1 downto 0) <= tmp_19_cast_fu_880_p1(4 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40)) then
                    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter1(1 downto 0) <= node_count_addr_reg_1103(1 downto 0);
                    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter1(1 downto 0) <= node_output_addr_reg_1097(1 downto 0);
                exitcond_reg_1114 <= exitcond_fu_675_p2;
                    node_count_addr_reg_1103(1 downto 0) <= tmp_s_fu_662_p1(4 - 1 downto 0)(1 downto 0);
                    node_output_addr_reg_1097(1 downto 0) <= tmp_s_fu_662_p1(4 - 1 downto 0)(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st10_fsm_9)) then
                cumsum_V_reg_1037 <= cumsum_V_fu_515_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then
                j_1_1_reg_1168 <= j_1_1_fu_743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then
                j_1_2_reg_1219 <= j_1_2_fu_813_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then
                j_1_3_reg_1270 <= j_1_3_fu_887_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                j_1_reg_1109 <= j_1_fu_669_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1043 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st39_fsm_38))) then
                loc_V_1_reg_1074 <= loc_V_1_fu_544_p1;
                loc_V_reg_1068 <= p_Val2_s_fu_530_p1(30 downto 23);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st40_fsm_39)) then
                    r_V_4_reg_1087(35 downto 20) <= r_V_4_fu_654_p3(35 downto 20);
                rec_V_reg_1079 <= rec_V_fu_647_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7))) then
                reg_455 <= grp_fu_443_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it7) or (ap_const_logic_1 = ap_reg_ppiten_pp3_it7))) then
                reg_464 <= node_count_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it13) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it13) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it13) or (ap_const_logic_1 = ap_reg_ppiten_pp3_it13))) then
                reg_468 <= node_output_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st9_fsm_8))) then
                reg_478 <= grp_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8)) then
                    rhs_V_cast_reg_1138(35 downto 20) <= rhs_V_cast_fu_703_p1(35 downto 20);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1043 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st17_fsm_16))) then
                tmp_1_i_reg_1053 <= grp_fu_435_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1043 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st32_fsm_31))) then
                tmp_2_i_reg_1063 <= grp_fu_430_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_i_reg_1043 = ap_const_lv1_0) and (ap_const_logic_1 = ap_sig_cseq_ST_st28_fsm_27))) then
                tmp_i_8_reg_1058 <= grp_fu_438_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st11_fsm_10)) then
                tmp_i_reg_1043 <= tmp_i_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then
                tmp_reg_1032 <= tmp_fu_489_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then
                val_assign_1_reg_992 <= grp_fu_472_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then
                val_assign_2_reg_1017 <= grp_fu_472_p2;
            end if;
        end if;
    end process;
    r_V_4_reg_1087(19 downto 0) <= "00000000000000000000";
    node_output_addr_reg_1097(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter1(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter2(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter3(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter4(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter5(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter6(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter7(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter8(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter9(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter10(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter11(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter12(3 downto 2) <= "00";
    ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter13(3 downto 2) <= "00";
    node_count_addr_reg_1103(3 downto 2) <= "00";
    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter1(3 downto 2) <= "00";
    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter2(3 downto 2) <= "00";
    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter3(3 downto 2) <= "00";
    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter4(3 downto 2) <= "00";
    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter5(3 downto 2) <= "00";
    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter6(3 downto 2) <= "00";
    ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter7(3 downto 2) <= "00";
    rhs_V_cast_reg_1138(19 downto 0) <= "00000000000000000000";
    rhs_V_cast_reg_1138(51 downto 36) <= "0000000000000000";
    node_output_addr_1_reg_1156(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter1(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter2(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter3(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter4(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter5(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter6(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter7(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter8(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter9(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter10(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter11(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter12(3 downto 2) <= "01";
    ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter13(3 downto 2) <= "01";
    node_count_addr_1_reg_1162(3 downto 2) <= "01";
    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter1(3 downto 2) <= "01";
    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter2(3 downto 2) <= "01";
    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter3(3 downto 2) <= "01";
    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter4(3 downto 2) <= "01";
    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter5(3 downto 2) <= "01";
    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter6(3 downto 2) <= "01";
    ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter7(3 downto 2) <= "01";
    node_output_addr_2_reg_1207(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter1(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter2(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter3(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter4(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter5(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter6(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter7(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter8(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter9(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter10(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter11(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter12(3 downto 2) <= "10";
    ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter13(3 downto 2) <= "10";
    node_count_addr_2_reg_1213(3 downto 2) <= "10";
    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter1(3 downto 2) <= "10";
    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter2(3 downto 2) <= "10";
    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter3(3 downto 2) <= "10";
    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter4(3 downto 2) <= "10";
    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter5(3 downto 2) <= "10";
    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter6(3 downto 2) <= "10";
    ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter7(3 downto 2) <= "10";
    node_output_addr_3_reg_1258(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter1(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter2(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter3(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter4(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter5(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter6(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter7(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter8(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter9(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter10(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter11(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter12(3 downto 2) <= "11";
    ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter13(3 downto 2) <= "11";
    node_count_addr_3_reg_1264(3 downto 2) <= "11";
    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter1(3 downto 2) <= "11";
    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter2(3 downto 2) <= "11";
    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter3(3 downto 2) <= "11";
    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter4(3 downto 2) <= "11";
    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter5(3 downto 2) <= "11";
    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter6(3 downto 2) <= "11";
    ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter7(3 downto 2) <= "11";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_reg_ppiten_pp0_it13, ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp1_it13, ap_reg_ppiten_pp1_it14, ap_reg_ppiten_pp2_it13, ap_reg_ppiten_pp2_it14, ap_reg_ppiten_pp3_it13, ap_reg_ppiten_pp3_it14)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_40;
            when ap_ST_pp0_stg0_fsm_40 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it13))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_40;
                else
                    ap_NS_fsm <= ap_ST_st56_fsm_41;
                end if;
            when ap_ST_st56_fsm_41 => 
                ap_NS_fsm <= ap_ST_pp1_stg0_fsm_42;
            when ap_ST_pp1_stg0_fsm_42 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it14) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it13))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_42;
                else
                    ap_NS_fsm <= ap_ST_st72_fsm_43;
                end if;
            when ap_ST_st72_fsm_43 => 
                ap_NS_fsm <= ap_ST_pp2_stg0_fsm_44;
            when ap_ST_pp2_stg0_fsm_44 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp2_it14) and not((ap_const_logic_1 = ap_reg_ppiten_pp2_it13))))) then
                    ap_NS_fsm <= ap_ST_pp2_stg0_fsm_44;
                else
                    ap_NS_fsm <= ap_ST_st88_fsm_45;
                end if;
            when ap_ST_st88_fsm_45 => 
                ap_NS_fsm <= ap_ST_pp3_stg0_fsm_46;
            when ap_ST_pp3_stg0_fsm_46 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp3_it14) and not((ap_const_logic_1 = ap_reg_ppiten_pp3_it13))))) then
                    ap_NS_fsm <= ap_ST_pp3_stg0_fsm_46;
                else
                    ap_NS_fsm <= ap_ST_st104_fsm_47;
                end if;
            when ap_ST_st104_fsm_47 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    alphabuf_address0_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_pp0_stg0_fsm_40, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_44, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6, tmp_s_fu_662_p1, tmp_16_fu_802_p3)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0))) then 
            alphabuf_address0 <= tmp_16_fu_802_p3(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            alphabuf_address0 <= tmp_s_fu_662_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            alphabuf_address0 <= ap_const_lv64_E(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            alphabuf_address0 <= ap_const_lv64_C(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            alphabuf_address0 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            alphabuf_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            alphabuf_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            alphabuf_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            alphabuf_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            alphabuf_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            alphabuf_address0 <= "XXXX";
        end if; 
    end process;


    alphabuf_address1_assign_proc : process(ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_pp1_stg0_fsm_42, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp3_stg0_fsm_46, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6, tmp_17_cast_fu_736_p1, tmp_19_cast_fu_880_p1)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0))) then 
            alphabuf_address1 <= tmp_19_cast_fu_880_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            alphabuf_address1 <= tmp_17_cast_fu_736_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7)) then 
            alphabuf_address1 <= ap_const_lv64_F(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6)) then 
            alphabuf_address1 <= ap_const_lv64_D(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5)) then 
            alphabuf_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            alphabuf_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            alphabuf_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            alphabuf_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1)) then 
            alphabuf_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) then 
            alphabuf_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            alphabuf_address1 <= "XXXX";
        end if; 
    end process;


    alphabuf_ce0_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_pp0_stg0_fsm_40, ap_reg_ppiten_pp0_it0, ap_sig_cseq_ST_pp2_stg0_fsm_44, ap_reg_ppiten_pp2_it0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it0)))) then 
            alphabuf_ce0 <= ap_const_logic_1;
        else 
            alphabuf_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    alphabuf_ce1_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, ap_sig_cseq_ST_st2_fsm_1, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st6_fsm_5, ap_sig_cseq_ST_st8_fsm_7, ap_sig_cseq_ST_pp1_stg0_fsm_42, ap_reg_ppiten_pp1_it0, ap_sig_cseq_ST_pp3_stg0_fsm_46, ap_reg_ppiten_pp3_it0, ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st5_fsm_4, ap_sig_cseq_ST_st7_fsm_6)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st6_fsm_5) or (ap_const_logic_1 = ap_sig_cseq_ST_st8_fsm_7) or (ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or ((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0))) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) or (ap_const_logic_1 = ap_sig_cseq_ST_st7_fsm_6) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it0)))) then 
            alphabuf_ce1 <= ap_const_logic_1;
        else 
            alphabuf_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_sig_cseq_ST_st104_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st104_fsm_47)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_sig_cseq_ST_st104_fsm_47)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st104_fsm_47)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv32_0;

    ap_sig_116_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_116 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_1171_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_1171 <= (ap_const_lv1_1 = ap_CS_fsm(47 downto 47));
    end process;


    ap_sig_123_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_123 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_131_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_131 <= (ap_const_lv1_1 = ap_CS_fsm(5 downto 5));
    end process;


    ap_sig_139_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_139 <= (ap_const_lv1_1 = ap_CS_fsm(7 downto 7));
    end process;


    ap_sig_148_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_148 <= (ap_const_lv1_1 = ap_CS_fsm(40 downto 40));
    end process;


    ap_sig_186_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_186 <= (ap_const_lv1_1 = ap_CS_fsm(42 downto 42));
    end process;


    ap_sig_224_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_224 <= (ap_const_lv1_1 = ap_CS_fsm(44 downto 44));
    end process;


    ap_sig_263_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_263 <= (ap_const_lv1_1 = ap_CS_fsm(46 downto 46));
    end process;


    ap_sig_312_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_312 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_319_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_319 <= (ap_const_lv1_1 = ap_CS_fsm(8 downto 8));
    end process;


    ap_sig_348_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_348 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_364_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_364 <= (ap_const_lv1_1 = ap_CS_fsm(6 downto 6));
    end process;


    ap_sig_382_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_382 <= (ap_const_lv1_1 = ap_CS_fsm(9 downto 9));
    end process;


    ap_sig_391_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_391 <= (ap_const_lv1_1 = ap_CS_fsm(10 downto 10));
    end process;


    ap_sig_400_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_400 <= (ap_const_lv1_1 = ap_CS_fsm(11 downto 11));
    end process;


    ap_sig_412_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_412 <= (ap_const_lv1_1 = ap_CS_fsm(16 downto 16));
    end process;


    ap_sig_422_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_422 <= (ap_const_lv1_1 = ap_CS_fsm(27 downto 27));
    end process;


    ap_sig_432_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_432 <= (ap_const_lv1_1 = ap_CS_fsm(31 downto 31));
    end process;


    ap_sig_442_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_442 <= (ap_const_lv1_1 = ap_CS_fsm(38 downto 38));
    end process;


    ap_sig_454_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_454 <= (ap_const_lv1_1 = ap_CS_fsm(39 downto 39));
    end process;


    ap_sig_63_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_63 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_741_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_741 <= (ap_const_lv1_1 = ap_CS_fsm(41 downto 41));
    end process;


    ap_sig_751_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_751 <= (ap_const_lv1_1 = ap_CS_fsm(43 downto 43));
    end process;


    ap_sig_761_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_761 <= (ap_const_lv1_1 = ap_CS_fsm(45 downto 45));
    end process;


    ap_sig_839_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_839 <= (ap_const_lv1_1 = ap_CS_fsm(32 downto 32));
    end process;


    ap_sig_849_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_849 <= (ap_const_lv1_1 = ap_CS_fsm(28 downto 28));
    end process;


    ap_sig_858_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_858 <= (ap_const_lv1_1 = ap_CS_fsm(17 downto 17));
    end process;


    ap_sig_cseq_ST_pp0_stg0_fsm_40_assign_proc : process(ap_sig_148)
    begin
        if (ap_sig_148) then 
            ap_sig_cseq_ST_pp0_stg0_fsm_40 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp0_stg0_fsm_40 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp1_stg0_fsm_42_assign_proc : process(ap_sig_186)
    begin
        if (ap_sig_186) then 
            ap_sig_cseq_ST_pp1_stg0_fsm_42 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp1_stg0_fsm_42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp2_stg0_fsm_44_assign_proc : process(ap_sig_224)
    begin
        if (ap_sig_224) then 
            ap_sig_cseq_ST_pp2_stg0_fsm_44 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp2_stg0_fsm_44 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_pp3_stg0_fsm_46_assign_proc : process(ap_sig_263)
    begin
        if (ap_sig_263) then 
            ap_sig_cseq_ST_pp3_stg0_fsm_46 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_pp3_stg0_fsm_46 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st104_fsm_47_assign_proc : process(ap_sig_1171)
    begin
        if (ap_sig_1171) then 
            ap_sig_cseq_ST_st104_fsm_47 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st104_fsm_47 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st10_fsm_9_assign_proc : process(ap_sig_382)
    begin
        if (ap_sig_382) then 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st10_fsm_9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st11_fsm_10_assign_proc : process(ap_sig_391)
    begin
        if (ap_sig_391) then 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st11_fsm_10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st12_fsm_11_assign_proc : process(ap_sig_400)
    begin
        if (ap_sig_400) then 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st12_fsm_11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st17_fsm_16_assign_proc : process(ap_sig_412)
    begin
        if (ap_sig_412) then 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st17_fsm_16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st18_fsm_17_assign_proc : process(ap_sig_858)
    begin
        if (ap_sig_858) then 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st18_fsm_17 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_63)
    begin
        if (ap_sig_63) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st28_fsm_27_assign_proc : process(ap_sig_422)
    begin
        if (ap_sig_422) then 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st28_fsm_27 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st29_fsm_28_assign_proc : process(ap_sig_849)
    begin
        if (ap_sig_849) then 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st29_fsm_28 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_116)
    begin
        if (ap_sig_116) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st32_fsm_31_assign_proc : process(ap_sig_432)
    begin
        if (ap_sig_432) then 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st32_fsm_31 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st33_fsm_32_assign_proc : process(ap_sig_839)
    begin
        if (ap_sig_839) then 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st33_fsm_32 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st39_fsm_38_assign_proc : process(ap_sig_442)
    begin
        if (ap_sig_442) then 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st39_fsm_38 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_312)
    begin
        if (ap_sig_312) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st40_fsm_39_assign_proc : process(ap_sig_454)
    begin
        if (ap_sig_454) then 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st40_fsm_39 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_123)
    begin
        if (ap_sig_123) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st56_fsm_41_assign_proc : process(ap_sig_741)
    begin
        if (ap_sig_741) then 
            ap_sig_cseq_ST_st56_fsm_41 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st56_fsm_41 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_348)
    begin
        if (ap_sig_348) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st6_fsm_5_assign_proc : process(ap_sig_131)
    begin
        if (ap_sig_131) then 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st6_fsm_5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st72_fsm_43_assign_proc : process(ap_sig_751)
    begin
        if (ap_sig_751) then 
            ap_sig_cseq_ST_st72_fsm_43 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st72_fsm_43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st7_fsm_6_assign_proc : process(ap_sig_364)
    begin
        if (ap_sig_364) then 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st7_fsm_6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st88_fsm_45_assign_proc : process(ap_sig_761)
    begin
        if (ap_sig_761) then 
            ap_sig_cseq_ST_st88_fsm_45 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st88_fsm_45 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st8_fsm_7_assign_proc : process(ap_sig_139)
    begin
        if (ap_sig_139) then 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st8_fsm_7 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st9_fsm_8_assign_proc : process(ap_sig_319)
    begin
        if (ap_sig_319) then 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st9_fsm_8 <= ap_const_logic_0;
        end if; 
    end process;

    cumsum_V_cast_fu_482_p1 <= std_logic_vector(resize(unsigned(reg_478),33));
    cumsum_V_fu_515_p2 <= std_logic_vector(unsigned(tmp10_cast_fu_502_p1) + unsigned(tmp11_cast_fu_511_p1));
    exitcond_1_fu_749_p2 <= "1" when (j_3_phi_fu_396_p4 = ap_const_lv2_3) else "0";
    exitcond_2_fu_819_p2 <= "1" when (j_s_phi_fu_407_p4 = ap_const_lv2_3) else "0";
    exitcond_3_fu_893_p2 <= "1" when (j_2_phi_fu_418_p4 = ap_const_lv2_3) else "0";
    exitcond_fu_675_p2 <= "1" when (j4_phi_fu_385_p4 = ap_const_lv2_3) else "0";
    grp_fu_435_p0 <= std_logic_vector(resize(unsigned(cumsum_V_reg_1037),64));
    grp_fu_443_p2 <= std_logic_vector(unsigned(alphabuf_q0) + unsigned(alphabuf_q1));
    grp_fu_449_p2 <= std_logic_vector(unsigned(alphabuf_q1) + unsigned(alphabuf_q0));
    grp_fu_472_p2 <= std_logic_vector(unsigned(reg_455) + unsigned(grp_fu_449_p2));
    grp_fu_685_p1 <= grp_fu_685_p10(32 - 1 downto 0);
    grp_fu_685_p10 <= std_logic_vector(resize(unsigned(reg_459),48));
    grp_fu_706_p0 <= grp_fu_706_p00(36 - 1 downto 0);
    grp_fu_706_p00 <= std_logic_vector(resize(unsigned(r_V_4_reg_1087),52));
    grp_fu_706_p1 <= grp_fu_706_p10(48 - 1 downto 0);
    grp_fu_706_p10 <= std_logic_vector(resize(unsigned(alpha_norm_V_reg_1123),52));
    grp_fu_759_p1 <= grp_fu_759_p10(32 - 1 downto 0);
    grp_fu_759_p10 <= std_logic_vector(resize(unsigned(reg_459),48));
    grp_fu_777_p0 <= rhs_V_cast_reg_1138(36 - 1 downto 0);
    grp_fu_777_p1 <= grp_fu_777_p10(48 - 1 downto 0);
    grp_fu_777_p10 <= std_logic_vector(resize(unsigned(alpha_norm_V_1_reg_1182),52));
    grp_fu_829_p1 <= grp_fu_829_p10(32 - 1 downto 0);
    grp_fu_829_p10 <= std_logic_vector(resize(unsigned(reg_459),48));
    grp_fu_847_p0 <= rhs_V_cast_reg_1138(36 - 1 downto 0);
    grp_fu_847_p1 <= grp_fu_847_p10(48 - 1 downto 0);
    grp_fu_847_p10 <= std_logic_vector(resize(unsigned(alpha_norm_V_2_reg_1233),52));
    grp_fu_903_p0 <= grp_fu_903_p00(32 - 1 downto 0);
    grp_fu_903_p00 <= std_logic_vector(resize(unsigned(reg_459),48));
    grp_fu_921_p0 <= grp_fu_921_p00(48 - 1 downto 0);
    grp_fu_921_p00 <= std_logic_vector(resize(unsigned(alpha_norm_V_3_reg_1284),52));
    grp_fu_921_p1 <= rhs_V_cast_reg_1138(36 - 1 downto 0);
    isNeg_fu_568_p3 <= sh_assign_fu_562_p2(8 downto 8);

    j4_phi_fu_385_p4_assign_proc : process(j4_reg_381, ap_sig_cseq_ST_pp0_stg0_fsm_40, ap_reg_ppiten_pp0_it1, j_1_reg_1109, exitcond_reg_1114)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp0_stg0_fsm_40) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_reg_1114))) then 
            j4_phi_fu_385_p4 <= j_1_reg_1109;
        else 
            j4_phi_fu_385_p4 <= j4_reg_381;
        end if; 
    end process;

    j_1_1_fu_743_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_3_phi_fu_396_p4));
    j_1_2_fu_813_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_s_phi_fu_407_p4));
    j_1_3_fu_887_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j_2_phi_fu_418_p4));
    j_1_fu_669_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(j4_phi_fu_385_p4));
    j_22_cast_fu_798_p1 <= std_logic_vector(resize(unsigned(j_s_phi_fu_407_p4),3));

    j_2_phi_fu_418_p4_assign_proc : process(j_2_reg_414, ap_sig_cseq_ST_pp3_stg0_fsm_46, ap_reg_ppiten_pp3_it1, j_1_3_reg_1270, exitcond_3_reg_1275)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp3_stg0_fsm_46) and (ap_const_logic_1 = ap_reg_ppiten_pp3_it1) and (ap_const_lv1_0 = exitcond_3_reg_1275))) then 
            j_2_phi_fu_418_p4 <= j_1_3_reg_1270;
        else 
            j_2_phi_fu_418_p4 <= j_2_reg_414;
        end if; 
    end process;


    j_3_phi_fu_396_p4_assign_proc : process(j_3_reg_392, ap_sig_cseq_ST_pp1_stg0_fsm_42, ap_reg_ppiten_pp1_it1, j_1_1_reg_1168, exitcond_1_reg_1173)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp1_stg0_fsm_42) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and (ap_const_lv1_0 = exitcond_1_reg_1173))) then 
            j_3_phi_fu_396_p4 <= j_1_1_reg_1168;
        else 
            j_3_phi_fu_396_p4 <= j_3_reg_392;
        end if; 
    end process;


    j_s_phi_fu_407_p4_assign_proc : process(j_s_reg_403, ap_sig_cseq_ST_pp2_stg0_fsm_44, ap_reg_ppiten_pp2_it1, j_1_2_reg_1219, exitcond_2_reg_1224)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_pp2_stg0_fsm_44) and (ap_const_logic_1 = ap_reg_ppiten_pp2_it1) and (ap_const_lv1_0 = exitcond_2_reg_1224))) then 
            j_s_phi_fu_407_p4 <= j_1_2_reg_1219;
        else 
            j_s_phi_fu_407_p4 <= j_s_reg_403;
        end if; 
    end process;

    loc_V_1_fu_544_p1 <= p_Val2_s_fu_530_p1(23 - 1 downto 0);

    node_count_address0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it6, ap_reg_ppiten_pp3_it6, ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter5, ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter5, ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter5, ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter5)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp3_it6)) then 
            node_count_address0 <= ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter5;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it6)) then 
            node_count_address0 <= ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter5;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it6)) then 
            node_count_address0 <= ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter5;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it6)) then 
            node_count_address0 <= ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter5;
        else 
            node_count_address0 <= "XXXX";
        end if; 
    end process;


    node_count_address1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp1_it8, ap_reg_ppiten_pp2_it8, ap_reg_ppiten_pp3_it8, ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter7, ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter7, ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter7, ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter7)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp3_it8)) then 
            node_count_address1 <= ap_reg_ppstg_node_count_addr_3_reg_1264_pp3_iter7;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it8)) then 
            node_count_address1 <= ap_reg_ppstg_node_count_addr_2_reg_1213_pp2_iter7;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it8)) then 
            node_count_address1 <= ap_reg_ppstg_node_count_addr_1_reg_1162_pp1_iter7;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8)) then 
            node_count_address1 <= ap_reg_ppstg_node_count_addr_reg_1103_pp0_iter7;
        else 
            node_count_address1 <= "XXXX";
        end if; 
    end process;


    node_count_ce0_assign_proc : process(ap_reg_ppiten_pp0_it6, ap_reg_ppiten_pp1_it6, ap_reg_ppiten_pp2_it6, ap_reg_ppiten_pp3_it6)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it6) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it6) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it6) or (ap_const_logic_1 = ap_reg_ppiten_pp3_it6))) then 
            node_count_ce0 <= ap_const_logic_1;
        else 
            node_count_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_count_ce1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp1_it8, ap_reg_ppiten_pp2_it8, ap_reg_ppiten_pp3_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it8) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it8) or (ap_const_logic_1 = ap_reg_ppiten_pp3_it8))) then 
            node_count_ce1 <= ap_const_logic_1;
        else 
            node_count_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    node_count_d1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp1_it8, ap_reg_ppiten_pp2_it8, ap_reg_ppiten_pp3_it8, tmp_7_fu_694_p2, tmp_33_1_fu_768_p2, tmp_33_2_fu_838_p2, tmp_33_3_fu_912_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp3_it8)) then 
            node_count_d1 <= tmp_33_3_fu_912_p2;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it8)) then 
            node_count_d1 <= tmp_33_2_fu_838_p2;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it8)) then 
            node_count_d1 <= tmp_33_1_fu_768_p2;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it8)) then 
            node_count_d1 <= tmp_7_fu_694_p2;
        else 
            node_count_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_count_we1_assign_proc : process(ap_reg_ppiten_pp0_it8, ap_reg_ppiten_pp1_it8, ap_reg_ppiten_pp2_it8, ap_reg_ppiten_pp3_it8)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it8) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it8) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it8) or (ap_const_logic_1 = ap_reg_ppiten_pp3_it8))) then 
            node_count_we1 <= ap_const_logic_1;
        else 
            node_count_we1 <= ap_const_logic_0;
        end if; 
    end process;


    node_output_address0_assign_proc : process(ap_reg_ppiten_pp0_it12, ap_reg_ppiten_pp1_it12, ap_reg_ppiten_pp2_it12, ap_reg_ppiten_pp3_it12, ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter11, ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter11, ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter11, ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter11)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp3_it12)) then 
            node_output_address0 <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter11;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it12)) then 
            node_output_address0 <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter11;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it12)) then 
            node_output_address0 <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter11;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it12)) then 
            node_output_address0 <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter11;
        else 
            node_output_address0 <= "XXXX";
        end if; 
    end process;


    node_output_address1_assign_proc : process(ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp1_it14, ap_reg_ppiten_pp2_it14, ap_reg_ppiten_pp3_it14, ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter13, ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter13, ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter13, ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter13)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp3_it14)) then 
            node_output_address1 <= ap_reg_ppstg_node_output_addr_3_reg_1258_pp3_iter13;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it14)) then 
            node_output_address1 <= ap_reg_ppstg_node_output_addr_2_reg_1207_pp2_iter13;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it14)) then 
            node_output_address1 <= ap_reg_ppstg_node_output_addr_1_reg_1156_pp1_iter13;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it14)) then 
            node_output_address1 <= ap_reg_ppstg_node_output_addr_reg_1097_pp0_iter13;
        else 
            node_output_address1 <= "XXXX";
        end if; 
    end process;


    node_output_ce0_assign_proc : process(ap_reg_ppiten_pp0_it12, ap_reg_ppiten_pp1_it12, ap_reg_ppiten_pp2_it12, ap_reg_ppiten_pp3_it12)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it12) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it12) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it12) or (ap_const_logic_1 = ap_reg_ppiten_pp3_it12))) then 
            node_output_ce0 <= ap_const_logic_1;
        else 
            node_output_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    node_output_ce1_assign_proc : process(ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp1_it14, ap_reg_ppiten_pp2_it14, ap_reg_ppiten_pp3_it14)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it14) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it14) or (ap_const_logic_1 = ap_reg_ppiten_pp3_it14))) then 
            node_output_ce1 <= ap_const_logic_1;
        else 
            node_output_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    node_output_d1_assign_proc : process(ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp1_it14, ap_reg_ppiten_pp2_it14, ap_reg_ppiten_pp3_it14, tmp_9_fu_722_p2, tmp_35_1_fu_792_p2, tmp_35_2_fu_862_p2, tmp_35_3_fu_936_p2)
    begin
        if ((ap_const_logic_1 = ap_reg_ppiten_pp3_it14)) then 
            node_output_d1 <= tmp_35_3_fu_936_p2;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp2_it14)) then 
            node_output_d1 <= tmp_35_2_fu_862_p2;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp1_it14)) then 
            node_output_d1 <= tmp_35_1_fu_792_p2;
        elsif ((ap_const_logic_1 = ap_reg_ppiten_pp0_it14)) then 
            node_output_d1 <= tmp_9_fu_722_p2;
        else 
            node_output_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    node_output_we1_assign_proc : process(ap_reg_ppiten_pp0_it14, ap_reg_ppiten_pp1_it14, ap_reg_ppiten_pp2_it14, ap_reg_ppiten_pp3_it14)
    begin
        if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it14) or (ap_const_logic_1 = ap_reg_ppiten_pp1_it14) or (ap_const_logic_1 = ap_reg_ppiten_pp2_it14) or (ap_const_logic_1 = ap_reg_ppiten_pp3_it14))) then 
            node_output_we1 <= ap_const_logic_1;
        else 
            node_output_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_548_p3 <= (ap_const_lv1_1 & loc_V_1_reg_1074);
    p_Val2_s_fu_530_p1 <= grp_fu_425_p2;
    r_V_4_fu_654_p3 <= (intensity & ap_const_lv20_0);
    rec_V_fu_647_p3 <= 
        ap_const_lv48_FFFFFFFFFFFF when (tmp_i_reg_1043(0) = '1') else 
        tmp_14_fu_639_p3;
    rhs_V_cast_fu_703_p1 <= std_logic_vector(resize(unsigned(r_V_4_reg_1087),52));
        sh_assign_1_cast_cast_fu_597_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_585_p3),24));

        sh_assign_1_cast_fu_593_p1 <= std_logic_vector(resize(signed(sh_assign_1_fu_585_p3),32));

    sh_assign_1_fu_585_p3 <= 
        tmp_4_i_i_i_cast_fu_581_p1 when (isNeg_fu_568_p3(0) = '1') else 
        sh_assign_fu_562_p2;
    sh_assign_fu_562_p2 <= std_logic_vector(signed(ap_const_lv9_181) + signed(tmp_i_i_i_i_cast_fu_559_p1));
    tmp10_cast_fu_502_p1 <= std_logic_vector(resize(unsigned(tmp_reg_1032),34));
    tmp11_cast_fu_511_p1 <= std_logic_vector(resize(unsigned(tmp9_fu_505_p2),34));
    tmp9_fu_505_p2 <= std_logic_vector(unsigned(tmp_13_cast_fu_498_p1) + unsigned(tmp_7_cast_fu_495_p1));
    tmp_10_cast_fu_486_p1 <= std_logic_vector(resize(unsigned(val_assign_2_reg_1017),33));
    tmp_13_cast_fu_498_p1 <= std_logic_vector(resize(unsigned(reg_478),33));
    tmp_14_fu_639_p3 <= 
        tmp_6_fu_625_p1 when (isNeg_fu_568_p3(0) = '1') else 
        tmp_8_fu_629_p4;
    tmp_15_fu_728_p3 <= (ap_const_lv1_1 & j_3_phi_fu_396_p4);
    tmp_16_fu_802_p3 <= (ap_const_lv61_1 & j_22_cast_fu_798_p1);
    tmp_17_cast_fu_736_p1 <= std_logic_vector(resize(unsigned(tmp_15_fu_728_p3),64));
    tmp_17_fu_617_p3 <= tmp_7_i_i_i_fu_605_p2(23 downto 23);
    tmp_18_fu_868_p3 <= (ap_const_lv1_1 & j_2_phi_fu_418_p4);
        tmp_19_cast5_fu_876_p1 <= std_logic_vector(resize(signed(tmp_18_fu_868_p3),4));

    tmp_19_cast_fu_880_p1 <= std_logic_vector(resize(unsigned(tmp_19_cast5_fu_876_p1),64));
    tmp_19_fu_690_p1 <= grp_fu_685_p2(32 - 1 downto 0);
    tmp_20_fu_764_p1 <= grp_fu_759_p2(32 - 1 downto 0);
    tmp_21_fu_834_p1 <= grp_fu_829_p2(32 - 1 downto 0);
    tmp_22_fu_908_p1 <= grp_fu_903_p2(32 - 1 downto 0);
    tmp_2_i_i_i_fu_555_p1 <= std_logic_vector(resize(unsigned(p_Result_s_fu_548_p3),110));
    tmp_33_1_fu_768_p2 <= std_logic_vector(unsigned(reg_464) + unsigned(tmp_20_reg_1187));
    tmp_33_2_fu_838_p2 <= std_logic_vector(unsigned(reg_464) + unsigned(tmp_21_reg_1238));
    tmp_33_3_fu_912_p2 <= std_logic_vector(unsigned(tmp_22_reg_1289) + unsigned(reg_464));
    tmp_35_1_fu_792_p2 <= std_logic_vector(unsigned(reg_468) + unsigned(phitmp_1_reg_1197));
    tmp_35_2_fu_862_p2 <= std_logic_vector(unsigned(reg_468) + unsigned(phitmp_2_reg_1248));
    tmp_35_3_fu_936_p2 <= std_logic_vector(unsigned(phitmp_3_reg_1299) + unsigned(reg_468));
        tmp_4_i_i_i_cast_fu_581_p1 <= std_logic_vector(resize(signed(tmp_4_i_i_i_fu_576_p2),9));

    tmp_4_i_i_i_fu_576_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(loc_V_reg_1068));
    tmp_6_fu_625_p1 <= std_logic_vector(resize(unsigned(tmp_17_fu_617_p3),48));
    tmp_6_i_i_i_fu_601_p1 <= std_logic_vector(resize(unsigned(sh_assign_1_cast_fu_593_p1),110));
    tmp_7_cast_fu_495_p1 <= std_logic_vector(resize(unsigned(val_assign_1_reg_992),33));
    tmp_7_fu_694_p2 <= std_logic_vector(unsigned(reg_464) + unsigned(tmp_19_reg_1128));
    tmp_7_i_i_i_fu_605_p2 <= std_logic_vector(shift_right(unsigned(p_Result_s_fu_548_p3),to_integer(unsigned('0' & sh_assign_1_cast_cast_fu_597_p1(24-1 downto 0)))));
    tmp_8_fu_629_p4 <= tmp_9_i_i_i_fu_611_p2(70 downto 23);
    tmp_9_fu_722_p2 <= std_logic_vector(unsigned(reg_468) + unsigned(phitmp_reg_1146));
    tmp_9_i_i_i_fu_611_p2 <= std_logic_vector(shift_left(unsigned(tmp_2_i_i_i_fu_555_p1),to_integer(unsigned('0' & tmp_6_i_i_i_fu_601_p1(31-1 downto 0)))));
    tmp_fu_489_p2 <= std_logic_vector(unsigned(tmp_10_cast_fu_486_p1) + unsigned(cumsum_V_cast_fu_482_p1));
    tmp_i_fu_521_p2 <= "1" when (cumsum_V_reg_1037 = ap_const_lv34_0) else "0";
    tmp_i_i_i_i_cast_fu_559_p1 <= std_logic_vector(resize(unsigned(loc_V_reg_1068),9));
    tmp_s_fu_662_p1 <= std_logic_vector(resize(unsigned(j4_phi_fu_385_p4),64));
end behav;
